// Generated by LiveScript 1.3.0
'use strict';
var fs, path, NODE_PATH, defaults, mixin, camelize, filter, deepRequire, slice$ = [].slice;
fs = require('fs');
path = require('path');
NODE_PATH = process.env.NODE_PATH;
defaults = {
  extensions: ['js', 'json', 'ls', 'coffee'],
  recursive: false,
  camelize: true,
  filter: null,
  map: null
};
mixin = function(dest){
  var sources, i$, len$, src, key, value;
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (key in src) {
      value = src[key];
      dest[key] = value;
    }
  }
  return dest;
};
camelize = function(str){
  return str.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
filter = function(method, name){
  switch (Object.prototype.toString.call(method).slice(8, -1)) {
  case 'Function':
    return method(name);
  case 'RegExp':
    return method.test(name);
  default:
    return true;
  }
};
deepRequire = module.exports = curry$(function(cwd, opts, str){
  var options;
  if (!/^[\.]{1,2}\//.test(str) && fs.existsSync(NODE_PATH)) {
    cwd = NODE_PATH;
  }
  options = mixin({}, defaults, opts);
  return (function(){
    function parseDir(dir){
      var modules, absDir;
      modules = {};
      absDir = path.join(cwd, dir);
      fs.readdirSync(absDir).forEach(function(file){
        var ext, relPath, absPath, stat, name;
        ext = file.match(/\.(.*)$/i) || [];
        relPath = path.join(dir, file);
        absPath = path.join(cwd, relPath);
        stat = fs.statSync(absPath);
        name = file.replace(ext[0], '');
        if (options.camelize) {
          name = camelize(name);
        }
        if (stat.isDirectory() && options.recursive) {
          return modules[name] = parseDir(relPath);
        } else if (stat.isFile() && options.extensions.indexOf(ext[1]) !== -1) {
          if (!filter(options.filter, file)) {
            return;
          }
          if (options.map) {
            name = options.map(name);
          }
          return modules[name] = require(absPath);
        }
      });
      return modules;
    }
    return parseDir;
  }())(
  str);
});
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}